
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module printer_system(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		          		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		          		HDMI_TX_DE,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// HPS //////////
	inout 		          		HPS_CONV_USB_N,
	output		    [14:0]		HPS_DDR3_ADDR,
	output		     [2:0]		HPS_DDR3_BA,
	output		          		HPS_DDR3_CAS_N,
	output		          		HPS_DDR3_CKE,
	output		          		HPS_DDR3_CK_N,
	output		          		HPS_DDR3_CK_P,
	output		          		HPS_DDR3_CS_N,
	output		     [3:0]		HPS_DDR3_DM,
	inout 		    [31:0]		HPS_DDR3_DQ,
	inout 		     [3:0]		HPS_DDR3_DQS_N,
	inout 		     [3:0]		HPS_DDR3_DQS_P,
	output		          		HPS_DDR3_ODT,
	output		          		HPS_DDR3_RAS_N,
	output		          		HPS_DDR3_RESET_N,
	input 		          		HPS_DDR3_RZQ,
	output		          		HPS_DDR3_WE_N,
	output		          		HPS_ENET_GTX_CLK,
	inout 		          		HPS_ENET_INT_N,
	output		          		HPS_ENET_MDC,
	inout 		          		HPS_ENET_MDIO,
	input 		          		HPS_ENET_RX_CLK,
	input 		     [3:0]		HPS_ENET_RX_DATA,
	input 		          		HPS_ENET_RX_DV,
	output		     [3:0]		HPS_ENET_TX_DATA,
	output		          		HPS_ENET_TX_EN,
	inout 		          		HPS_GSENSOR_INT,
	inout 		          		HPS_I2C0_SCLK,
	inout 		          		HPS_I2C0_SDAT,
	inout 		          		HPS_I2C1_SCLK,
	inout 		          		HPS_I2C1_SDAT,
	inout 		          		HPS_KEY,
	inout 		          		HPS_LED,
	inout 		          		HPS_LTC_GPIO,
	output		          		HPS_SD_CLK,
	inout 		          		HPS_SD_CMD,
	inout 		     [3:0]		HPS_SD_DATA,
	output		          		HPS_SPIM_CLK,
	input 		          		HPS_SPIM_MISO,
	output		          		HPS_SPIM_MOSI,
	inout 		          		HPS_SPIM_SS,
	input 		          		HPS_UART_RX,
	output		          		HPS_UART_TX,
	input 		          		HPS_USB_CLKOUT,
	inout 		     [7:0]		HPS_USB_DATA,
	input 		          		HPS_USB_DIR,
	input 		          		HPS_USB_NXT,
	output		          		HPS_USB_STP,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
//Декларация основных сигнальных кабелей
wire	[0:2]		heaters;
wire	[2:0]		motors	[0:4]; //{enable, step, dir}
wire	[0:4]		motors_invertion;
wire	[0:5]		endstops;
wire	[0:5]		endstops_invertion;
wire				bar_end;
wire				bar_end_invertion;
wire	[1:0]		uart; //RX, TX
wire	[1:0]		i2c; //SDA, SCL
wire	[11:0]	temp		[0:2];
wire	[11:0]	analog	[0:7];

//Модуль для чтения аналоговых сигналов
adc_control u0 (
	.CLOCK    (FPGA_CLK1_50),    //                clk.clk
	.ADC_SCLK (ADC_SCK), // external_interface.SCLK
	.ADC_CS_N (ADC_CONVST), //                   .CS_N
	.ADC_DOUT (ADC_SDO), //                   .DOUT
	.ADC_DIN  (ADC_SDI),  //                   .DIN
	.CH0      (analog[0]),      //           readings.CH0
	.CH1      (analog[1]),      //                   .CH1
	.CH2      (analog[2]),      //                   .CH2
	.CH3      (analog[3]),      //                   .CH3
	.CH4      (analog[4]),      //                   .CH4
	.CH5      (analog[5]),      //                   .CH5
	.CH6      (analog[6]),      //                   .CH6
	.CH7      (analog[7]),      //                   .CH7
	.RESET    (!KEY[0])     //              reset.reset
);

//Связь сигнальных кабелей с входными портами
assign heaters 	= {GPIO_1[31], GPIO_1[33], GPIO_1[35]};
assign motors[0]	= {GPIO_0[1], 	GPIO_0[3], 	GPIO_0[5]}; //Motor X
assign motors[1]	= {GPIO_0[11], GPIO_0[13], GPIO_0[15]}; //Motor Y
assign motors[2]	= {GPIO_0[17], GPIO_0[19], GPIO_0[21]}; //Motor Z
assign motors[3]	= {GPIO_1[19], GPIO_1[21], GPIO_1[23]}; //Motor E0
assign motors[4]	= {GPIO_1[25], GPIO_1[27], GPIO_1[29]}; //Motor E1
assign endstops 	= {GPIO_1[11], GPIO_1[9], 	GPIO_1[7], GPIO_1[5], GPIO_1[3], GPIO_1[1]};
assign bar_end 	= GPIO_1[13];
assign uart			= {GPIO_0[35], GPIO_0[33]};
assign i2c			= {GPIO_0[29], GPIO_0[31]};
assign temp[0] 	= analog[1];
assign temp[1] 	= analog[3];
assign temp[2] 	= analog[5];




//=======================================================
//  Structural coding
//=======================================================



endmodule
