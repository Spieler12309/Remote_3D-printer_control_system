#ifndef _ALTERA_HPS_0_BRIDGES_H_
#define _ALTERA_HPS_0_BRIDGES_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file 'soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0_bridges' and devices
 * connected to the following masters:
 *   axi_f2h
 *   h2f
 *   h2f_lw
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'hps_0_axi_sdram', class 'axi_sdram'
 * The macros are prefixed with 'HPS_0_AXI_SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_AXI_SDRAM_COMPONENT_TYPE axi_sdram
#define HPS_0_AXI_SDRAM_COMPONENT_NAME hps_0_axi_sdram
#define HPS_0_AXI_SDRAM_BASE 0x0
#define HPS_0_AXI_SDRAM_SPAN 0x80000000
#define HPS_0_AXI_SDRAM_END 0x7fffffff
#define HPS_0_AXI_SDRAM_SIZE_MULTIPLE 1
#define HPS_0_AXI_SDRAM_SIZE_VALUE 1<<31
#define HPS_0_AXI_SDRAM_WRITABLE 1
#define HPS_0_AXI_SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define HPS_0_AXI_SDRAM_MEMORY_INFO_GENERATE_HEX 0
#define HPS_0_AXI_SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 31

/*
 * Macros for device 'command_type', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_TYPE_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_TYPE_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_TYPE_COMPONENT_NAME command_type
#define COMMAND_TYPE_BASE 0x0
#define COMMAND_TYPE_SPAN 16
#define COMMAND_TYPE_END 0xf
#define COMMAND_TYPE_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_TYPE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_TYPE_CAPTURE 0
#define COMMAND_TYPE_DATA_WIDTH 32
#define COMMAND_TYPE_DO_TEST_BENCH_WIRING 0
#define COMMAND_TYPE_DRIVEN_SIM_VALUE 0
#define COMMAND_TYPE_EDGE_TYPE NONE
#define COMMAND_TYPE_FREQ 50000000
#define COMMAND_TYPE_HAS_IN 0
#define COMMAND_TYPE_HAS_OUT 1
#define COMMAND_TYPE_HAS_TRI 0
#define COMMAND_TYPE_IRQ_TYPE NONE
#define COMMAND_TYPE_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 4294906626
#define SYSID_QSYS_TIMESTAMP 1584474885

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'flags_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'FLAGS_IN_'.
 * The prefix is the slave descriptor.
 */
#define FLAGS_IN_COMPONENT_TYPE altera_avalon_pio
#define FLAGS_IN_COMPONENT_NAME flags_in
#define FLAGS_IN_BASE 0x4000
#define FLAGS_IN_SPAN 16
#define FLAGS_IN_END 0x400f
#define FLAGS_IN_BIT_CLEARING_EDGE_REGISTER 0
#define FLAGS_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FLAGS_IN_CAPTURE 0
#define FLAGS_IN_DATA_WIDTH 32
#define FLAGS_IN_DO_TEST_BENCH_WIRING 0
#define FLAGS_IN_DRIVEN_SIM_VALUE 0
#define FLAGS_IN_EDGE_TYPE NONE
#define FLAGS_IN_FREQ 50000000
#define FLAGS_IN_HAS_IN 1
#define FLAGS_IN_HAS_OUT 0
#define FLAGS_IN_HAS_TRI 0
#define FLAGS_IN_IRQ_TYPE NONE
#define FLAGS_IN_RESET_VALUE 0

/*
 * Macros for device 'flags_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'FLAGS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FLAGS_OUT_COMPONENT_TYPE altera_avalon_pio
#define FLAGS_OUT_COMPONENT_NAME flags_out
#define FLAGS_OUT_BASE 0x4020
#define FLAGS_OUT_SPAN 16
#define FLAGS_OUT_END 0x402f
#define FLAGS_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define FLAGS_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FLAGS_OUT_CAPTURE 0
#define FLAGS_OUT_DATA_WIDTH 32
#define FLAGS_OUT_DO_TEST_BENCH_WIRING 0
#define FLAGS_OUT_DRIVEN_SIM_VALUE 0
#define FLAGS_OUT_EDGE_TYPE NONE
#define FLAGS_OUT_FREQ 50000000
#define FLAGS_OUT_HAS_IN 0
#define FLAGS_OUT_HAS_OUT 1
#define FLAGS_OUT_HAS_TRI 0
#define FLAGS_OUT_IRQ_TYPE NONE
#define FLAGS_OUT_RESET_VALUE 0

/*
 * Macros for device 'command_x', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_X_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_X_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_X_COMPONENT_NAME command_x
#define COMMAND_X_BASE 0x5000
#define COMMAND_X_SPAN 16
#define COMMAND_X_END 0x500f
#define COMMAND_X_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_X_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_X_CAPTURE 0
#define COMMAND_X_DATA_WIDTH 32
#define COMMAND_X_DO_TEST_BENCH_WIRING 0
#define COMMAND_X_DRIVEN_SIM_VALUE 0
#define COMMAND_X_EDGE_TYPE NONE
#define COMMAND_X_FREQ 50000000
#define COMMAND_X_HAS_IN 0
#define COMMAND_X_HAS_OUT 1
#define COMMAND_X_HAS_TRI 0
#define COMMAND_X_IRQ_TYPE NONE
#define COMMAND_X_RESET_VALUE 0

/*
 * Macros for device 'command_y', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_Y_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_Y_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_Y_COMPONENT_NAME command_y
#define COMMAND_Y_BASE 0x5020
#define COMMAND_Y_SPAN 16
#define COMMAND_Y_END 0x502f
#define COMMAND_Y_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_Y_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_Y_CAPTURE 0
#define COMMAND_Y_DATA_WIDTH 32
#define COMMAND_Y_DO_TEST_BENCH_WIRING 0
#define COMMAND_Y_DRIVEN_SIM_VALUE 0
#define COMMAND_Y_EDGE_TYPE NONE
#define COMMAND_Y_FREQ 50000000
#define COMMAND_Y_HAS_IN 0
#define COMMAND_Y_HAS_OUT 1
#define COMMAND_Y_HAS_TRI 0
#define COMMAND_Y_IRQ_TYPE NONE
#define COMMAND_Y_RESET_VALUE 0

/*
 * Macros for device 'command_z', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_Z_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_Z_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_Z_COMPONENT_NAME command_z
#define COMMAND_Z_BASE 0x5040
#define COMMAND_Z_SPAN 16
#define COMMAND_Z_END 0x504f
#define COMMAND_Z_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_Z_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_Z_CAPTURE 0
#define COMMAND_Z_DATA_WIDTH 32
#define COMMAND_Z_DO_TEST_BENCH_WIRING 0
#define COMMAND_Z_DRIVEN_SIM_VALUE 0
#define COMMAND_Z_EDGE_TYPE NONE
#define COMMAND_Z_FREQ 50000000
#define COMMAND_Z_HAS_IN 0
#define COMMAND_Z_HAS_OUT 1
#define COMMAND_Z_HAS_TRI 0
#define COMMAND_Z_IRQ_TYPE NONE
#define COMMAND_Z_RESET_VALUE 0

/*
 * Macros for device 'command_e0', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_E0_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_E0_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_E0_COMPONENT_NAME command_e0
#define COMMAND_E0_BASE 0x5060
#define COMMAND_E0_SPAN 16
#define COMMAND_E0_END 0x506f
#define COMMAND_E0_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_E0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_E0_CAPTURE 0
#define COMMAND_E0_DATA_WIDTH 32
#define COMMAND_E0_DO_TEST_BENCH_WIRING 0
#define COMMAND_E0_DRIVEN_SIM_VALUE 0
#define COMMAND_E0_EDGE_TYPE NONE
#define COMMAND_E0_FREQ 50000000
#define COMMAND_E0_HAS_IN 0
#define COMMAND_E0_HAS_OUT 1
#define COMMAND_E0_HAS_TRI 0
#define COMMAND_E0_IRQ_TYPE NONE
#define COMMAND_E0_RESET_VALUE 0

/*
 * Macros for device 'command_e1', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_E1_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_E1_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_E1_COMPONENT_NAME command_e1
#define COMMAND_E1_BASE 0x5080
#define COMMAND_E1_SPAN 16
#define COMMAND_E1_END 0x508f
#define COMMAND_E1_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_E1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_E1_CAPTURE 0
#define COMMAND_E1_DATA_WIDTH 32
#define COMMAND_E1_DO_TEST_BENCH_WIRING 0
#define COMMAND_E1_DRIVEN_SIM_VALUE 0
#define COMMAND_E1_EDGE_TYPE NONE
#define COMMAND_E1_FREQ 50000000
#define COMMAND_E1_HAS_IN 0
#define COMMAND_E1_HAS_OUT 1
#define COMMAND_E1_HAS_TRI 0
#define COMMAND_E1_IRQ_TYPE NONE
#define COMMAND_E1_RESET_VALUE 0

/*
 * Macros for device 'command_f', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_F_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_F_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_F_COMPONENT_NAME command_f
#define COMMAND_F_BASE 0x50a0
#define COMMAND_F_SPAN 16
#define COMMAND_F_END 0x50af
#define COMMAND_F_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_F_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_F_CAPTURE 0
#define COMMAND_F_DATA_WIDTH 32
#define COMMAND_F_DO_TEST_BENCH_WIRING 0
#define COMMAND_F_DRIVEN_SIM_VALUE 0
#define COMMAND_F_EDGE_TYPE NONE
#define COMMAND_F_FREQ 50000000
#define COMMAND_F_HAS_IN 0
#define COMMAND_F_HAS_OUT 1
#define COMMAND_F_HAS_TRI 0
#define COMMAND_F_IRQ_TYPE NONE
#define COMMAND_F_RESET_VALUE 0

/*
 * Macros for device 'command_t', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_T_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_T_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_T_COMPONENT_NAME command_t
#define COMMAND_T_BASE 0x50c0
#define COMMAND_T_SPAN 16
#define COMMAND_T_END 0x50cf
#define COMMAND_T_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_T_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_T_CAPTURE 0
#define COMMAND_T_DATA_WIDTH 32
#define COMMAND_T_DO_TEST_BENCH_WIRING 0
#define COMMAND_T_DRIVEN_SIM_VALUE 0
#define COMMAND_T_EDGE_TYPE NONE
#define COMMAND_T_FREQ 50000000
#define COMMAND_T_HAS_IN 0
#define COMMAND_T_HAS_OUT 1
#define COMMAND_T_HAS_TRI 0
#define COMMAND_T_IRQ_TYPE NONE
#define COMMAND_T_RESET_VALUE 0

/*
 * Macros for device 'command_dt', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_DT_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_DT_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_DT_COMPONENT_NAME command_dt
#define COMMAND_DT_BASE 0x50e0
#define COMMAND_DT_SPAN 16
#define COMMAND_DT_END 0x50ef
#define COMMAND_DT_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_DT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_DT_CAPTURE 0
#define COMMAND_DT_DATA_WIDTH 32
#define COMMAND_DT_DO_TEST_BENCH_WIRING 0
#define COMMAND_DT_DRIVEN_SIM_VALUE 0
#define COMMAND_DT_EDGE_TYPE NONE
#define COMMAND_DT_FREQ 50000000
#define COMMAND_DT_HAS_IN 0
#define COMMAND_DT_HAS_OUT 1
#define COMMAND_DT_HAS_TRI 0
#define COMMAND_DT_IRQ_TYPE NONE
#define COMMAND_DT_RESET_VALUE 0

/*
 * Macros for device 'settings_max_speed_x', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_MAX_SPEED_X_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_MAX_SPEED_X_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_MAX_SPEED_X_COMPONENT_NAME settings_max_speed_x
#define SETTINGS_MAX_SPEED_X_BASE 0x5100
#define SETTINGS_MAX_SPEED_X_SPAN 16
#define SETTINGS_MAX_SPEED_X_END 0x510f
#define SETTINGS_MAX_SPEED_X_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_MAX_SPEED_X_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_MAX_SPEED_X_CAPTURE 0
#define SETTINGS_MAX_SPEED_X_DATA_WIDTH 32
#define SETTINGS_MAX_SPEED_X_DO_TEST_BENCH_WIRING 0
#define SETTINGS_MAX_SPEED_X_DRIVEN_SIM_VALUE 0
#define SETTINGS_MAX_SPEED_X_EDGE_TYPE NONE
#define SETTINGS_MAX_SPEED_X_FREQ 50000000
#define SETTINGS_MAX_SPEED_X_HAS_IN 0
#define SETTINGS_MAX_SPEED_X_HAS_OUT 1
#define SETTINGS_MAX_SPEED_X_HAS_TRI 0
#define SETTINGS_MAX_SPEED_X_IRQ_TYPE NONE
#define SETTINGS_MAX_SPEED_X_RESET_VALUE 0

/*
 * Macros for device 'settings_max_speed_y', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_MAX_SPEED_Y_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_MAX_SPEED_Y_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_MAX_SPEED_Y_COMPONENT_NAME settings_max_speed_y
#define SETTINGS_MAX_SPEED_Y_BASE 0x5120
#define SETTINGS_MAX_SPEED_Y_SPAN 16
#define SETTINGS_MAX_SPEED_Y_END 0x512f
#define SETTINGS_MAX_SPEED_Y_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_MAX_SPEED_Y_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_MAX_SPEED_Y_CAPTURE 0
#define SETTINGS_MAX_SPEED_Y_DATA_WIDTH 32
#define SETTINGS_MAX_SPEED_Y_DO_TEST_BENCH_WIRING 0
#define SETTINGS_MAX_SPEED_Y_DRIVEN_SIM_VALUE 0
#define SETTINGS_MAX_SPEED_Y_EDGE_TYPE NONE
#define SETTINGS_MAX_SPEED_Y_FREQ 50000000
#define SETTINGS_MAX_SPEED_Y_HAS_IN 0
#define SETTINGS_MAX_SPEED_Y_HAS_OUT 1
#define SETTINGS_MAX_SPEED_Y_HAS_TRI 0
#define SETTINGS_MAX_SPEED_Y_IRQ_TYPE NONE
#define SETTINGS_MAX_SPEED_Y_RESET_VALUE 0

/*
 * Macros for device 'settings_max_speed_z', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_MAX_SPEED_Z_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_MAX_SPEED_Z_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_MAX_SPEED_Z_COMPONENT_NAME settings_max_speed_z
#define SETTINGS_MAX_SPEED_Z_BASE 0x5140
#define SETTINGS_MAX_SPEED_Z_SPAN 16
#define SETTINGS_MAX_SPEED_Z_END 0x514f
#define SETTINGS_MAX_SPEED_Z_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_MAX_SPEED_Z_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_MAX_SPEED_Z_CAPTURE 0
#define SETTINGS_MAX_SPEED_Z_DATA_WIDTH 32
#define SETTINGS_MAX_SPEED_Z_DO_TEST_BENCH_WIRING 0
#define SETTINGS_MAX_SPEED_Z_DRIVEN_SIM_VALUE 0
#define SETTINGS_MAX_SPEED_Z_EDGE_TYPE NONE
#define SETTINGS_MAX_SPEED_Z_FREQ 50000000
#define SETTINGS_MAX_SPEED_Z_HAS_IN 0
#define SETTINGS_MAX_SPEED_Z_HAS_OUT 1
#define SETTINGS_MAX_SPEED_Z_HAS_TRI 0
#define SETTINGS_MAX_SPEED_Z_IRQ_TYPE NONE
#define SETTINGS_MAX_SPEED_Z_RESET_VALUE 0

/*
 * Macros for device 'settings_max_speed_e0', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_MAX_SPEED_E0_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_MAX_SPEED_E0_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_MAX_SPEED_E0_COMPONENT_NAME settings_max_speed_e0
#define SETTINGS_MAX_SPEED_E0_BASE 0x5160
#define SETTINGS_MAX_SPEED_E0_SPAN 16
#define SETTINGS_MAX_SPEED_E0_END 0x516f
#define SETTINGS_MAX_SPEED_E0_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_MAX_SPEED_E0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_MAX_SPEED_E0_CAPTURE 0
#define SETTINGS_MAX_SPEED_E0_DATA_WIDTH 32
#define SETTINGS_MAX_SPEED_E0_DO_TEST_BENCH_WIRING 0
#define SETTINGS_MAX_SPEED_E0_DRIVEN_SIM_VALUE 0
#define SETTINGS_MAX_SPEED_E0_EDGE_TYPE NONE
#define SETTINGS_MAX_SPEED_E0_FREQ 50000000
#define SETTINGS_MAX_SPEED_E0_HAS_IN 0
#define SETTINGS_MAX_SPEED_E0_HAS_OUT 1
#define SETTINGS_MAX_SPEED_E0_HAS_TRI 0
#define SETTINGS_MAX_SPEED_E0_IRQ_TYPE NONE
#define SETTINGS_MAX_SPEED_E0_RESET_VALUE 0

/*
 * Macros for device 'settings_max_speed_e1', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_MAX_SPEED_E1_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_MAX_SPEED_E1_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_MAX_SPEED_E1_COMPONENT_NAME settings_max_speed_e1
#define SETTINGS_MAX_SPEED_E1_BASE 0x5180
#define SETTINGS_MAX_SPEED_E1_SPAN 16
#define SETTINGS_MAX_SPEED_E1_END 0x518f
#define SETTINGS_MAX_SPEED_E1_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_MAX_SPEED_E1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_MAX_SPEED_E1_CAPTURE 0
#define SETTINGS_MAX_SPEED_E1_DATA_WIDTH 32
#define SETTINGS_MAX_SPEED_E1_DO_TEST_BENCH_WIRING 0
#define SETTINGS_MAX_SPEED_E1_DRIVEN_SIM_VALUE 0
#define SETTINGS_MAX_SPEED_E1_EDGE_TYPE NONE
#define SETTINGS_MAX_SPEED_E1_FREQ 50000000
#define SETTINGS_MAX_SPEED_E1_HAS_IN 0
#define SETTINGS_MAX_SPEED_E1_HAS_OUT 1
#define SETTINGS_MAX_SPEED_E1_HAS_TRI 0
#define SETTINGS_MAX_SPEED_E1_IRQ_TYPE NONE
#define SETTINGS_MAX_SPEED_E1_RESET_VALUE 0

/*
 * Macros for device 'settings_acceleration_x', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_ACCELERATION_X_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_ACCELERATION_X_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_ACCELERATION_X_COMPONENT_NAME settings_acceleration_x
#define SETTINGS_ACCELERATION_X_BASE 0x51a0
#define SETTINGS_ACCELERATION_X_SPAN 16
#define SETTINGS_ACCELERATION_X_END 0x51af
#define SETTINGS_ACCELERATION_X_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_ACCELERATION_X_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_ACCELERATION_X_CAPTURE 0
#define SETTINGS_ACCELERATION_X_DATA_WIDTH 32
#define SETTINGS_ACCELERATION_X_DO_TEST_BENCH_WIRING 0
#define SETTINGS_ACCELERATION_X_DRIVEN_SIM_VALUE 0
#define SETTINGS_ACCELERATION_X_EDGE_TYPE NONE
#define SETTINGS_ACCELERATION_X_FREQ 50000000
#define SETTINGS_ACCELERATION_X_HAS_IN 0
#define SETTINGS_ACCELERATION_X_HAS_OUT 1
#define SETTINGS_ACCELERATION_X_HAS_TRI 0
#define SETTINGS_ACCELERATION_X_IRQ_TYPE NONE
#define SETTINGS_ACCELERATION_X_RESET_VALUE 0

/*
 * Macros for device 'settings_acceleration_y', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_ACCELERATION_Y_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_ACCELERATION_Y_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_ACCELERATION_Y_COMPONENT_NAME settings_acceleration_y
#define SETTINGS_ACCELERATION_Y_BASE 0x51c0
#define SETTINGS_ACCELERATION_Y_SPAN 16
#define SETTINGS_ACCELERATION_Y_END 0x51cf
#define SETTINGS_ACCELERATION_Y_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_ACCELERATION_Y_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_ACCELERATION_Y_CAPTURE 0
#define SETTINGS_ACCELERATION_Y_DATA_WIDTH 32
#define SETTINGS_ACCELERATION_Y_DO_TEST_BENCH_WIRING 0
#define SETTINGS_ACCELERATION_Y_DRIVEN_SIM_VALUE 0
#define SETTINGS_ACCELERATION_Y_EDGE_TYPE NONE
#define SETTINGS_ACCELERATION_Y_FREQ 50000000
#define SETTINGS_ACCELERATION_Y_HAS_IN 0
#define SETTINGS_ACCELERATION_Y_HAS_OUT 1
#define SETTINGS_ACCELERATION_Y_HAS_TRI 0
#define SETTINGS_ACCELERATION_Y_IRQ_TYPE NONE
#define SETTINGS_ACCELERATION_Y_RESET_VALUE 0

/*
 * Macros for device 'settings_acceleration_z', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_ACCELERATION_Z_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_ACCELERATION_Z_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_ACCELERATION_Z_COMPONENT_NAME settings_acceleration_z
#define SETTINGS_ACCELERATION_Z_BASE 0x51e0
#define SETTINGS_ACCELERATION_Z_SPAN 16
#define SETTINGS_ACCELERATION_Z_END 0x51ef
#define SETTINGS_ACCELERATION_Z_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_ACCELERATION_Z_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_ACCELERATION_Z_CAPTURE 0
#define SETTINGS_ACCELERATION_Z_DATA_WIDTH 32
#define SETTINGS_ACCELERATION_Z_DO_TEST_BENCH_WIRING 0
#define SETTINGS_ACCELERATION_Z_DRIVEN_SIM_VALUE 0
#define SETTINGS_ACCELERATION_Z_EDGE_TYPE NONE
#define SETTINGS_ACCELERATION_Z_FREQ 50000000
#define SETTINGS_ACCELERATION_Z_HAS_IN 0
#define SETTINGS_ACCELERATION_Z_HAS_OUT 1
#define SETTINGS_ACCELERATION_Z_HAS_TRI 0
#define SETTINGS_ACCELERATION_Z_IRQ_TYPE NONE
#define SETTINGS_ACCELERATION_Z_RESET_VALUE 0

/*
 * Macros for device 'settings_acceleration_e0', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_ACCELERATION_E0_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_ACCELERATION_E0_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_ACCELERATION_E0_COMPONENT_NAME settings_acceleration_e0
#define SETTINGS_ACCELERATION_E0_BASE 0x5200
#define SETTINGS_ACCELERATION_E0_SPAN 16
#define SETTINGS_ACCELERATION_E0_END 0x520f
#define SETTINGS_ACCELERATION_E0_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_ACCELERATION_E0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_ACCELERATION_E0_CAPTURE 0
#define SETTINGS_ACCELERATION_E0_DATA_WIDTH 32
#define SETTINGS_ACCELERATION_E0_DO_TEST_BENCH_WIRING 0
#define SETTINGS_ACCELERATION_E0_DRIVEN_SIM_VALUE 0
#define SETTINGS_ACCELERATION_E0_EDGE_TYPE NONE
#define SETTINGS_ACCELERATION_E0_FREQ 50000000
#define SETTINGS_ACCELERATION_E0_HAS_IN 0
#define SETTINGS_ACCELERATION_E0_HAS_OUT 1
#define SETTINGS_ACCELERATION_E0_HAS_TRI 0
#define SETTINGS_ACCELERATION_E0_IRQ_TYPE NONE
#define SETTINGS_ACCELERATION_E0_RESET_VALUE 0

/*
 * Macros for device 'settings_acceleration_e1', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_ACCELERATION_E1_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_ACCELERATION_E1_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_ACCELERATION_E1_COMPONENT_NAME settings_acceleration_e1
#define SETTINGS_ACCELERATION_E1_BASE 0x5220
#define SETTINGS_ACCELERATION_E1_SPAN 16
#define SETTINGS_ACCELERATION_E1_END 0x522f
#define SETTINGS_ACCELERATION_E1_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_ACCELERATION_E1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_ACCELERATION_E1_CAPTURE 0
#define SETTINGS_ACCELERATION_E1_DATA_WIDTH 32
#define SETTINGS_ACCELERATION_E1_DO_TEST_BENCH_WIRING 0
#define SETTINGS_ACCELERATION_E1_DRIVEN_SIM_VALUE 0
#define SETTINGS_ACCELERATION_E1_EDGE_TYPE NONE
#define SETTINGS_ACCELERATION_E1_FREQ 50000000
#define SETTINGS_ACCELERATION_E1_HAS_IN 0
#define SETTINGS_ACCELERATION_E1_HAS_OUT 1
#define SETTINGS_ACCELERATION_E1_HAS_TRI 0
#define SETTINGS_ACCELERATION_E1_IRQ_TYPE NONE
#define SETTINGS_ACCELERATION_E1_RESET_VALUE 0

/*
 * Macros for device 'settings_jerk_x', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_JERK_X_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_JERK_X_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_JERK_X_COMPONENT_NAME settings_jerk_x
#define SETTINGS_JERK_X_BASE 0x5240
#define SETTINGS_JERK_X_SPAN 16
#define SETTINGS_JERK_X_END 0x524f
#define SETTINGS_JERK_X_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_JERK_X_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_JERK_X_CAPTURE 0
#define SETTINGS_JERK_X_DATA_WIDTH 32
#define SETTINGS_JERK_X_DO_TEST_BENCH_WIRING 0
#define SETTINGS_JERK_X_DRIVEN_SIM_VALUE 0
#define SETTINGS_JERK_X_EDGE_TYPE NONE
#define SETTINGS_JERK_X_FREQ 50000000
#define SETTINGS_JERK_X_HAS_IN 0
#define SETTINGS_JERK_X_HAS_OUT 1
#define SETTINGS_JERK_X_HAS_TRI 0
#define SETTINGS_JERK_X_IRQ_TYPE NONE
#define SETTINGS_JERK_X_RESET_VALUE 0

/*
 * Macros for device 'settings_jerk_y', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_JERK_Y_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_JERK_Y_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_JERK_Y_COMPONENT_NAME settings_jerk_y
#define SETTINGS_JERK_Y_BASE 0x5260
#define SETTINGS_JERK_Y_SPAN 16
#define SETTINGS_JERK_Y_END 0x526f
#define SETTINGS_JERK_Y_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_JERK_Y_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_JERK_Y_CAPTURE 0
#define SETTINGS_JERK_Y_DATA_WIDTH 32
#define SETTINGS_JERK_Y_DO_TEST_BENCH_WIRING 0
#define SETTINGS_JERK_Y_DRIVEN_SIM_VALUE 0
#define SETTINGS_JERK_Y_EDGE_TYPE NONE
#define SETTINGS_JERK_Y_FREQ 50000000
#define SETTINGS_JERK_Y_HAS_IN 0
#define SETTINGS_JERK_Y_HAS_OUT 1
#define SETTINGS_JERK_Y_HAS_TRI 0
#define SETTINGS_JERK_Y_IRQ_TYPE NONE
#define SETTINGS_JERK_Y_RESET_VALUE 0

/*
 * Macros for device 'settings_jerk_z', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_JERK_Z_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_JERK_Z_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_JERK_Z_COMPONENT_NAME settings_jerk_z
#define SETTINGS_JERK_Z_BASE 0x5280
#define SETTINGS_JERK_Z_SPAN 16
#define SETTINGS_JERK_Z_END 0x528f
#define SETTINGS_JERK_Z_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_JERK_Z_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_JERK_Z_CAPTURE 0
#define SETTINGS_JERK_Z_DATA_WIDTH 32
#define SETTINGS_JERK_Z_DO_TEST_BENCH_WIRING 0
#define SETTINGS_JERK_Z_DRIVEN_SIM_VALUE 0
#define SETTINGS_JERK_Z_EDGE_TYPE NONE
#define SETTINGS_JERK_Z_FREQ 50000000
#define SETTINGS_JERK_Z_HAS_IN 0
#define SETTINGS_JERK_Z_HAS_OUT 1
#define SETTINGS_JERK_Z_HAS_TRI 0
#define SETTINGS_JERK_Z_IRQ_TYPE NONE
#define SETTINGS_JERK_Z_RESET_VALUE 0

/*
 * Macros for device 'settings_jerk_e0', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_JERK_E0_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_JERK_E0_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_JERK_E0_COMPONENT_NAME settings_jerk_e0
#define SETTINGS_JERK_E0_BASE 0x52a0
#define SETTINGS_JERK_E0_SPAN 16
#define SETTINGS_JERK_E0_END 0x52af
#define SETTINGS_JERK_E0_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_JERK_E0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_JERK_E0_CAPTURE 0
#define SETTINGS_JERK_E0_DATA_WIDTH 32
#define SETTINGS_JERK_E0_DO_TEST_BENCH_WIRING 0
#define SETTINGS_JERK_E0_DRIVEN_SIM_VALUE 0
#define SETTINGS_JERK_E0_EDGE_TYPE NONE
#define SETTINGS_JERK_E0_FREQ 50000000
#define SETTINGS_JERK_E0_HAS_IN 0
#define SETTINGS_JERK_E0_HAS_OUT 1
#define SETTINGS_JERK_E0_HAS_TRI 0
#define SETTINGS_JERK_E0_IRQ_TYPE NONE
#define SETTINGS_JERK_E0_RESET_VALUE 0

/*
 * Macros for device 'settings_jerk_e1', class 'altera_avalon_pio'
 * The macros are prefixed with 'SETTINGS_JERK_E1_'.
 * The prefix is the slave descriptor.
 */
#define SETTINGS_JERK_E1_COMPONENT_TYPE altera_avalon_pio
#define SETTINGS_JERK_E1_COMPONENT_NAME settings_jerk_e1
#define SETTINGS_JERK_E1_BASE 0x52c0
#define SETTINGS_JERK_E1_SPAN 16
#define SETTINGS_JERK_E1_END 0x52cf
#define SETTINGS_JERK_E1_BIT_CLEARING_EDGE_REGISTER 0
#define SETTINGS_JERK_E1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SETTINGS_JERK_E1_CAPTURE 0
#define SETTINGS_JERK_E1_DATA_WIDTH 32
#define SETTINGS_JERK_E1_DO_TEST_BENCH_WIRING 0
#define SETTINGS_JERK_E1_DRIVEN_SIM_VALUE 0
#define SETTINGS_JERK_E1_EDGE_TYPE NONE
#define SETTINGS_JERK_E1_FREQ 50000000
#define SETTINGS_JERK_E1_HAS_IN 0
#define SETTINGS_JERK_E1_HAS_OUT 1
#define SETTINGS_JERK_E1_HAS_TRI 0
#define SETTINGS_JERK_E1_IRQ_TYPE NONE
#define SETTINGS_JERK_E1_RESET_VALUE 0

/*
 * Macros for device 'temp_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_0_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_0_COMPONENT_TYPE altera_avalon_pio
#define TEMP_0_COMPONENT_NAME temp_0
#define TEMP_0_BASE 0x6000
#define TEMP_0_SPAN 16
#define TEMP_0_END 0x600f
#define TEMP_0_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_0_CAPTURE 0
#define TEMP_0_DATA_WIDTH 12
#define TEMP_0_DO_TEST_BENCH_WIRING 0
#define TEMP_0_DRIVEN_SIM_VALUE 0
#define TEMP_0_EDGE_TYPE NONE
#define TEMP_0_FREQ 50000000
#define TEMP_0_HAS_IN 1
#define TEMP_0_HAS_OUT 0
#define TEMP_0_HAS_TRI 0
#define TEMP_0_IRQ_TYPE NONE
#define TEMP_0_RESET_VALUE 0

/*
 * Macros for device 'temp_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_1_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_1_COMPONENT_TYPE altera_avalon_pio
#define TEMP_1_COMPONENT_NAME temp_1
#define TEMP_1_BASE 0x6020
#define TEMP_1_SPAN 16
#define TEMP_1_END 0x602f
#define TEMP_1_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_1_CAPTURE 0
#define TEMP_1_DATA_WIDTH 12
#define TEMP_1_DO_TEST_BENCH_WIRING 0
#define TEMP_1_DRIVEN_SIM_VALUE 0
#define TEMP_1_EDGE_TYPE NONE
#define TEMP_1_FREQ 50000000
#define TEMP_1_HAS_IN 1
#define TEMP_1_HAS_OUT 0
#define TEMP_1_HAS_TRI 0
#define TEMP_1_IRQ_TYPE NONE
#define TEMP_1_RESET_VALUE 0

/*
 * Macros for device 'temp_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_2_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_2_COMPONENT_TYPE altera_avalon_pio
#define TEMP_2_COMPONENT_NAME temp_2
#define TEMP_2_BASE 0x6040
#define TEMP_2_SPAN 16
#define TEMP_2_END 0x604f
#define TEMP_2_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_2_CAPTURE 0
#define TEMP_2_DATA_WIDTH 12
#define TEMP_2_DO_TEST_BENCH_WIRING 0
#define TEMP_2_DRIVEN_SIM_VALUE 0
#define TEMP_2_EDGE_TYPE NONE
#define TEMP_2_FREQ 50000000
#define TEMP_2_HAS_IN 1
#define TEMP_2_HAS_OUT 0
#define TEMP_2_HAS_TRI 0
#define TEMP_2_IRQ_TYPE NONE
#define TEMP_2_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff

/*
 * Macros for device 'hps_0_gmac0', class 'stmmac'
 * The macros are prefixed with 'HPS_0_GMAC0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GMAC0_COMPONENT_TYPE stmmac
#define HPS_0_GMAC0_COMPONENT_NAME hps_0_gmac0
#define HPS_0_GMAC0_BASE 0xff700000
#define HPS_0_GMAC0_SPAN 8192
#define HPS_0_GMAC0_END 0xff701fff

/*
 * Macros for device 'hps_0_gmac1', class 'stmmac'
 * The macros are prefixed with 'HPS_0_GMAC1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GMAC1_COMPONENT_TYPE stmmac
#define HPS_0_GMAC1_COMPONENT_NAME hps_0_gmac1
#define HPS_0_GMAC1_BASE 0xff702000
#define HPS_0_GMAC1_SPAN 8192
#define HPS_0_GMAC1_END 0xff703fff

/*
 * Macros for device 'hps_0_sdmmc', class 'sdmmc'
 * The macros are prefixed with 'HPS_0_SDMMC_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SDMMC_COMPONENT_TYPE sdmmc
#define HPS_0_SDMMC_COMPONENT_NAME hps_0_sdmmc
#define HPS_0_SDMMC_BASE 0xff704000
#define HPS_0_SDMMC_SPAN 4096
#define HPS_0_SDMMC_END 0xff704fff

/*
 * Macros for device 'hps_0_qspi', class 'cadence_qspi'
 * The macros are prefixed with 'HPS_0_QSPI_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_QSPI_COMPONENT_TYPE cadence_qspi
#define HPS_0_QSPI_COMPONENT_NAME hps_0_qspi
#define HPS_0_QSPI_BASE 0xff705000
#define HPS_0_QSPI_SPAN 256
#define HPS_0_QSPI_END 0xff7050ff

/*
 * Macros for device 'hps_0_fpgamgr', class 'altera_fpgamgr'
 * The macros are prefixed with 'HPS_0_FPGAMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_FPGAMGR_COMPONENT_TYPE altera_fpgamgr
#define HPS_0_FPGAMGR_COMPONENT_NAME hps_0_fpgamgr
#define HPS_0_FPGAMGR_BASE 0xff706000
#define HPS_0_FPGAMGR_SPAN 4096
#define HPS_0_FPGAMGR_END 0xff706fff

/*
 * Macros for device 'hps_0_gpio0', class 'dw_gpio'
 * The macros are prefixed with 'HPS_0_GPIO0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GPIO0_COMPONENT_TYPE dw_gpio
#define HPS_0_GPIO0_COMPONENT_NAME hps_0_gpio0
#define HPS_0_GPIO0_BASE 0xff708000
#define HPS_0_GPIO0_SPAN 256
#define HPS_0_GPIO0_END 0xff7080ff

/*
 * Macros for device 'hps_0_gpio1', class 'dw_gpio'
 * The macros are prefixed with 'HPS_0_GPIO1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GPIO1_COMPONENT_TYPE dw_gpio
#define HPS_0_GPIO1_COMPONENT_NAME hps_0_gpio1
#define HPS_0_GPIO1_BASE 0xff709000
#define HPS_0_GPIO1_SPAN 256
#define HPS_0_GPIO1_END 0xff7090ff

/*
 * Macros for device 'hps_0_gpio2', class 'dw_gpio'
 * The macros are prefixed with 'HPS_0_GPIO2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GPIO2_COMPONENT_TYPE dw_gpio
#define HPS_0_GPIO2_COMPONENT_NAME hps_0_gpio2
#define HPS_0_GPIO2_BASE 0xff70a000
#define HPS_0_GPIO2_SPAN 256
#define HPS_0_GPIO2_END 0xff70a0ff

/*
 * Macros for device 'hps_0_l3regs', class 'altera_l3regs'
 * The macros are prefixed with 'HPS_0_L3REGS_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_L3REGS_COMPONENT_TYPE altera_l3regs
#define HPS_0_L3REGS_COMPONENT_NAME hps_0_l3regs
#define HPS_0_L3REGS_BASE 0xff800000
#define HPS_0_L3REGS_SPAN 4096
#define HPS_0_L3REGS_END 0xff800fff

/*
 * Macros for device 'hps_0_nand0', class 'denali_nand'
 * The macros are prefixed with 'HPS_0_NAND0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_NAND0_COMPONENT_TYPE denali_nand
#define HPS_0_NAND0_COMPONENT_NAME hps_0_nand0
#define HPS_0_NAND0_BASE 0xff900000
#define HPS_0_NAND0_SPAN 65536
#define HPS_0_NAND0_END 0xff90ffff

/*
 * Macros for device 'hps_0_usb0', class 'usb'
 * The macros are prefixed with 'HPS_0_USB0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_USB0_COMPONENT_TYPE usb
#define HPS_0_USB0_COMPONENT_NAME hps_0_usb0
#define HPS_0_USB0_BASE 0xffb00000
#define HPS_0_USB0_SPAN 262144
#define HPS_0_USB0_END 0xffb3ffff

/*
 * Macros for device 'hps_0_usb1', class 'usb'
 * The macros are prefixed with 'HPS_0_USB1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_USB1_COMPONENT_TYPE usb
#define HPS_0_USB1_COMPONENT_NAME hps_0_usb1
#define HPS_0_USB1_BASE 0xffb40000
#define HPS_0_USB1_SPAN 262144
#define HPS_0_USB1_END 0xffb7ffff

/*
 * Macros for device 'hps_0_dcan0', class 'bosch_dcan'
 * The macros are prefixed with 'HPS_0_DCAN0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_DCAN0_COMPONENT_TYPE bosch_dcan
#define HPS_0_DCAN0_COMPONENT_NAME hps_0_dcan0
#define HPS_0_DCAN0_BASE 0xffc00000
#define HPS_0_DCAN0_SPAN 4096
#define HPS_0_DCAN0_END 0xffc00fff

/*
 * Macros for device 'hps_0_dcan1', class 'bosch_dcan'
 * The macros are prefixed with 'HPS_0_DCAN1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_DCAN1_COMPONENT_TYPE bosch_dcan
#define HPS_0_DCAN1_COMPONENT_NAME hps_0_dcan1
#define HPS_0_DCAN1_BASE 0xffc01000
#define HPS_0_DCAN1_SPAN 4096
#define HPS_0_DCAN1_END 0xffc01fff

/*
 * Macros for device 'hps_0_uart0', class 'snps_uart'
 * The macros are prefixed with 'HPS_0_UART0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_UART0_COMPONENT_TYPE snps_uart
#define HPS_0_UART0_COMPONENT_NAME hps_0_uart0
#define HPS_0_UART0_BASE 0xffc02000
#define HPS_0_UART0_SPAN 256
#define HPS_0_UART0_END 0xffc020ff
#define HPS_0_UART0_FIFO_DEPTH 128
#define HPS_0_UART0_FIFO_HWFC 0
#define HPS_0_UART0_FIFO_MODE 1
#define HPS_0_UART0_FIFO_SWFC 0
#define HPS_0_UART0_FREQ 100000000

/*
 * Macros for device 'hps_0_uart1', class 'snps_uart'
 * The macros are prefixed with 'HPS_0_UART1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_UART1_COMPONENT_TYPE snps_uart
#define HPS_0_UART1_COMPONENT_NAME hps_0_uart1
#define HPS_0_UART1_BASE 0xffc03000
#define HPS_0_UART1_SPAN 256
#define HPS_0_UART1_END 0xffc030ff
#define HPS_0_UART1_FIFO_DEPTH 128
#define HPS_0_UART1_FIFO_HWFC 0
#define HPS_0_UART1_FIFO_MODE 1
#define HPS_0_UART1_FIFO_SWFC 0
#define HPS_0_UART1_FREQ 100000000

/*
 * Macros for device 'hps_0_i2c0', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C0_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C0_COMPONENT_NAME hps_0_i2c0
#define HPS_0_I2C0_BASE 0xffc04000
#define HPS_0_I2C0_SPAN 256
#define HPS_0_I2C0_END 0xffc040ff

/*
 * Macros for device 'hps_0_i2c1', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C1_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C1_COMPONENT_NAME hps_0_i2c1
#define HPS_0_I2C1_BASE 0xffc05000
#define HPS_0_I2C1_SPAN 256
#define HPS_0_I2C1_END 0xffc050ff

/*
 * Macros for device 'hps_0_i2c2', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C2_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C2_COMPONENT_NAME hps_0_i2c2
#define HPS_0_I2C2_BASE 0xffc06000
#define HPS_0_I2C2_SPAN 256
#define HPS_0_I2C2_END 0xffc060ff

/*
 * Macros for device 'hps_0_i2c3', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C3_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C3_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C3_COMPONENT_NAME hps_0_i2c3
#define HPS_0_I2C3_BASE 0xffc07000
#define HPS_0_I2C3_SPAN 256
#define HPS_0_I2C3_END 0xffc070ff

/*
 * Macros for device 'hps_0_timer0', class 'dw_apb_timer_sp'
 * The macros are prefixed with 'HPS_0_TIMER0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER0_COMPONENT_TYPE dw_apb_timer_sp
#define HPS_0_TIMER0_COMPONENT_NAME hps_0_timer0
#define HPS_0_TIMER0_BASE 0xffc08000
#define HPS_0_TIMER0_SPAN 256
#define HPS_0_TIMER0_END 0xffc080ff

/*
 * Macros for device 'hps_0_timer1', class 'dw_apb_timer_sp'
 * The macros are prefixed with 'HPS_0_TIMER1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER1_COMPONENT_TYPE dw_apb_timer_sp
#define HPS_0_TIMER1_COMPONENT_NAME hps_0_timer1
#define HPS_0_TIMER1_BASE 0xffc09000
#define HPS_0_TIMER1_SPAN 256
#define HPS_0_TIMER1_END 0xffc090ff

/*
 * Macros for device 'hps_0_sdrctl', class 'altera_sdrctl'
 * The macros are prefixed with 'HPS_0_SDRCTL_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SDRCTL_COMPONENT_TYPE altera_sdrctl
#define HPS_0_SDRCTL_COMPONENT_NAME hps_0_sdrctl
#define HPS_0_SDRCTL_BASE 0xffc25000
#define HPS_0_SDRCTL_SPAN 4096
#define HPS_0_SDRCTL_END 0xffc25fff

/*
 * Macros for device 'hps_0_timer2', class 'dw_apb_timer_osc'
 * The macros are prefixed with 'HPS_0_TIMER2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER2_COMPONENT_TYPE dw_apb_timer_osc
#define HPS_0_TIMER2_COMPONENT_NAME hps_0_timer2
#define HPS_0_TIMER2_BASE 0xffd00000
#define HPS_0_TIMER2_SPAN 256
#define HPS_0_TIMER2_END 0xffd000ff

/*
 * Macros for device 'hps_0_timer3', class 'dw_apb_timer_osc'
 * The macros are prefixed with 'HPS_0_TIMER3_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER3_COMPONENT_TYPE dw_apb_timer_osc
#define HPS_0_TIMER3_COMPONENT_NAME hps_0_timer3
#define HPS_0_TIMER3_BASE 0xffd01000
#define HPS_0_TIMER3_SPAN 256
#define HPS_0_TIMER3_END 0xffd010ff

/*
 * Macros for device 'hps_0_clkmgr', class 'asimov_clkmgr'
 * The macros are prefixed with 'HPS_0_CLKMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_CLKMGR_COMPONENT_TYPE asimov_clkmgr
#define HPS_0_CLKMGR_COMPONENT_NAME hps_0_clkmgr
#define HPS_0_CLKMGR_BASE 0xffd04000
#define HPS_0_CLKMGR_SPAN 4096
#define HPS_0_CLKMGR_END 0xffd04fff

/*
 * Macros for device 'hps_0_rstmgr', class 'altera_rstmgr'
 * The macros are prefixed with 'HPS_0_RSTMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_RSTMGR_COMPONENT_TYPE altera_rstmgr
#define HPS_0_RSTMGR_COMPONENT_NAME hps_0_rstmgr
#define HPS_0_RSTMGR_BASE 0xffd05000
#define HPS_0_RSTMGR_SPAN 256
#define HPS_0_RSTMGR_END 0xffd050ff

/*
 * Macros for device 'hps_0_sysmgr', class 'altera_sysmgr'
 * The macros are prefixed with 'HPS_0_SYSMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SYSMGR_COMPONENT_TYPE altera_sysmgr
#define HPS_0_SYSMGR_COMPONENT_NAME hps_0_sysmgr
#define HPS_0_SYSMGR_BASE 0xffd08000
#define HPS_0_SYSMGR_SPAN 1024
#define HPS_0_SYSMGR_END 0xffd083ff

/*
 * Macros for device 'hps_0_dma', class 'arm_pl330_dma'
 * The macros are prefixed with 'HPS_0_DMA_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_DMA_COMPONENT_TYPE arm_pl330_dma
#define HPS_0_DMA_COMPONENT_NAME hps_0_dma
#define HPS_0_DMA_BASE 0xffe01000
#define HPS_0_DMA_SPAN 4096
#define HPS_0_DMA_END 0xffe01fff

/*
 * Macros for device 'hps_0_spim0', class 'spi'
 * The macros are prefixed with 'HPS_0_SPIM0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SPIM0_COMPONENT_TYPE spi
#define HPS_0_SPIM0_COMPONENT_NAME hps_0_spim0
#define HPS_0_SPIM0_BASE 0xfff00000
#define HPS_0_SPIM0_SPAN 256
#define HPS_0_SPIM0_END 0xfff000ff

/*
 * Macros for device 'hps_0_spim1', class 'spi'
 * The macros are prefixed with 'HPS_0_SPIM1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SPIM1_COMPONENT_TYPE spi
#define HPS_0_SPIM1_COMPONENT_NAME hps_0_spim1
#define HPS_0_SPIM1_BASE 0xfff01000
#define HPS_0_SPIM1_SPAN 256
#define HPS_0_SPIM1_END 0xfff010ff

/*
 * Macros for device 'hps_0_timer', class 'arm_internal_timer'
 * The macros are prefixed with 'HPS_0_TIMER_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER_COMPONENT_TYPE arm_internal_timer
#define HPS_0_TIMER_COMPONENT_NAME hps_0_timer
#define HPS_0_TIMER_BASE 0xfffec600
#define HPS_0_TIMER_SPAN 256
#define HPS_0_TIMER_END 0xfffec6ff

/*
 * Macros for device 'hps_0_arm_gic_0', class 'arm_gic'
 * The macros are prefixed with 'HPS_0_ARM_GIC_0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_ARM_GIC_0_COMPONENT_TYPE arm_gic
#define HPS_0_ARM_GIC_0_COMPONENT_NAME hps_0_arm_gic_0
#define HPS_0_ARM_GIC_0_BASE 0xfffed000
#define HPS_0_ARM_GIC_0_SPAN 4096
#define HPS_0_ARM_GIC_0_END 0xfffedfff

/*
 * Macros for device 'hps_0_L2', class 'arm_pl310_L2'
 * The macros are prefixed with 'HPS_0_L2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_L2_COMPONENT_TYPE arm_pl310_L2
#define HPS_0_L2_COMPONENT_NAME hps_0_L2
#define HPS_0_L2_BASE 0xfffef000
#define HPS_0_L2_SPAN 4096
#define HPS_0_L2_END 0xfffeffff

/*
 * Macros for device 'hps_0_axi_ocram', class 'axi_ocram'
 * The macros are prefixed with 'HPS_0_AXI_OCRAM_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_AXI_OCRAM_COMPONENT_TYPE axi_ocram
#define HPS_0_AXI_OCRAM_COMPONENT_NAME hps_0_axi_ocram
#define HPS_0_AXI_OCRAM_BASE 0xffff0000
#define HPS_0_AXI_OCRAM_SPAN 65536
#define HPS_0_AXI_OCRAM_END 0xffffffff
#define HPS_0_AXI_OCRAM_SIZE_MULTIPLE 1
#define HPS_0_AXI_OCRAM_SIZE_VALUE 1<<16
#define HPS_0_AXI_OCRAM_WRITABLE 1
#define HPS_0_AXI_OCRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define HPS_0_AXI_OCRAM_MEMORY_INFO_GENERATE_HEX 0
#define HPS_0_AXI_OCRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16


#endif /* _ALTERA_HPS_0_BRIDGES_H_ */
